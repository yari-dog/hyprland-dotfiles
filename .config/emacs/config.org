#+TITLE: emacs conf
#+AUTHOR: yari
#+STARTUP: showeverything
#+OPTIONS: toc:2


* toc :toc:
- [[#important-shit][important shit]]
- [[#backup-location][backup location]]
- [[#buf-move][buf-move]]
- [[#copilot][copilot]]
- [[#corfu][corfu]]
- [[#dashboard][dashboard]]
- [[#dired][dired]]
- [[#diminish][diminish]]
- [[#discord][discord]]
- [[#drag-stuff][drag-stuff]]
- [[#eglot][eglot]]
- [[#evil-mode][evil mode]]
- [[#flycheck][flycheck]]
- [[#highlight-todo][highlight todo]]
- [[#ivy][ivy]]
- [[#keybinds][keybinds]]
- [[#languages][languages]]
- [[#launcher][launcher]]
- [[#lsp-mode-etc][lsp mode etc]]
- [[#magit][magit]]
- [[#modeline][modeline]]
- [[#org-mode][org mode]]
  - [[#enable-toc][enable toc]]
  - [[#enable-bullets][enable bullets]]
  - [[#diminish-org-indent-minor-mode][diminish org-indent minor mode]]
  - [[#other-settings][other settings]]
  - [[#org-roam][org-roam]]
- [[#prefs][prefs]]
  - [[#general][general]]
  - [[#text][text]]
  - [[#buffers][buffers]]
- [[#projectile][projectile]]
- [[#rainbow-delim][rainbow delim]]
- [[#rainbow-mode][rainbow mode]]
- [[#solaire][solaire]]
- [[#sudo-edit][sudo edit]]
- [[#theme][theme]]
- [[#tldr][tldr]]
- [[#treemacs][treemacs]]
- [[#vertico--co][vertico & co]]
- [[#vterm][vterm]]
- [[#which-key][which key]]

* important shit
load scripts
#+begin_src emacs-lisp
  (load-file (expand-file-name "keybinds.el" user-emacs-directory))
#+end_src
* backup location
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.local/share/emacs/backup/")))
#+end_src
* buf-move
move buffers
#+begin_src emacs-lisp
  (load-file (expand-file-name "custom-src/buf-move.el" user-emacs-directory))
#+end_src
* copilot
github copilot
#+begin_src emacs-lisp
  (use-package copilot
    :ensure (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
    :diminish
    :config
    (setq copilot-indent-offset-warning-disable t)
    :init
    (add-hook 'prog-mode-hook 'copilot-mode)
    :bind (:map copilot-completion-map
                ("C-<return>" . 'copilot-accept-completion)
                ("C-RET" . 'copilot-accept-completion)
                ("S-<return>" . 'copilot-accept-completion-by-word)))
#+end_src
* corfu
Completion frontend
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t) ;;cycle through all things
    (corfu-auto t) ;;autocomplete
    (corfu-auto-prefix 1) ;; 2 letters to start autocomplete
    (corfu-auto-delay 0.0) ;; idk 0s to start?
    :bind (:map corfu-map
                ("<tab>" . corfu-insert)
                ("<escape>" . corfu-quit))
    :init
    (global-corfu-mode))

  (use-package cape :ensure t)
  ;; get eglot to play nice with corfu
  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)

  ;; there's probably more eglot shit i gotta set up but that's a later yari problem

  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default)
    (kind-icon-blend-background nil)
    (kind-icon-blend-frac 0.08)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))


#+end_src
* dashboard
the welcome screen
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t) ;; show all the icons stuff
    (setq dashboard-banner-logo-title "arf arf arf :3") ;; logo title
    (setq dashboard-footer-messages '("awooooooooooooooooooooooooo"))
    (setq dashboard-startup-banner "~/.config/emacs/dashboard/banner_texts/puppymacs.txt") ;; image
    (setq dashboard-center-content t)
    (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name))) ;; make it show dashboard in client mode
    (setq dashboard-items '((recents . 5) ;; last 5 recents
                            (projects . 3)))
    (setq dashboard-projects-backend 'projectile)
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")))
    :config
    (dashboard-setup-startup-hook)
  )
#+end_src
* dired
#+begin_src emacs-lisp
  (use-package dired-preview
     :ensure t
     :config
     (setq dired-preview-delay 0.1)
     (dired-preview-global-mode 1))
#+end_src
* diminish
hide minor modes
#+begin_src emacs-lisp
(use-package diminish :ensure t) ;; hides minor modes from bar
#+end_src
* discord
#+begin_src emacs-lisp
  (use-package elcord
    :ensure t
    :init
    (elcord-mode))
#+end_src

* drag-stuff
all this really does is let me move lines/regions up/down a line lmao
#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t
    :config
    (drag-stuff-global-mode 1))
#+end_src
* eglot
completion backend (uses lsp's, check deps)
#+begin_src emacs-lisp
  ;; eglot is alr installed i just need to add hooks
  (use-package eglot
    :ensure t
    :config
    (setq eglot-events-buffer-size 0)
    :init
    (add-hook 'python-mode-hook 'eglot-ensure)
    (add-hook 'js-mode-hook 'eglot-ensure)
    (add-hook 'c-mode-common-hook 'eglot-ensure))

  (use-package jsonrpc
    :ensure t)


  ;; need to install emacs-lsp-booster from aur or whatever
  (use-package eglot-booster
    :ensure (:host github :repo "jdtsmith/eglot-booster")
    :after eglot
    :config
    (eglot-booster-mode))
#+end_src
* evil mode
vim like
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :demand t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-i-jump nil) ;; fucking fixes tab
    ;; unbind RET from evil
    (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "RET") nil))
    (evil-mode 1));; start evil mode on load


  (use-package evil-collection ;; install the collection
    :ensure t
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor :ensure t)
#+end_src
* flycheck
checks syntax errors etc
#+begin_src emacs-lisp
  (use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src
* highlight todo
#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
     :hook ((org-mode . hl-todo-mode)
           (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
* ivy
minibuffer completion and fancier commands and shit, swapped for vertico+consult+odorless+embark+marginalia+corfu
#+begin_src emacs-lisp
  ;; (use-package counsel
  ;;   :after ivy
  ;;   :ensure t
  ;;   :diminish
  ;;   :config (counsel-mode))

  ;; (use-package ivy
  ;;   :ensure t
  ;;   :diminish
  ;;   :bind
  ;;   ;; ivy-resume resumes the last Ivy-based completion.
  ;;   (("C-c C-r" . ivy-resume)
  ;;    ("C-x B" . ivy-switch-buffer-other-window))
  ;;   :custom
  ;;   (setq ivy-use-virtual-buffers t)
  ;;   (setq ivy-count-format "(%d/%d) ")
  ;;   (setq enable-recursive-minibuffers t)
  ;;   :config
  ;;   (ivy-mode))

  ;; (use-package all-the-icons-ivy-rich
  ;;   :ensure t
  ;;   :init (all-the-icons-ivy-rich-mode 1))

  ;; (use-package ivy-rich
  ;;   :after ivy
  ;;   :ensure t
  ;;   :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  ;;   :custom
  ;;   (ivy-virtual-abbreviate 'full
  ;;    ivy-rich-switch-buffer-align-virtual-buffer t
  ;;    ivy-rich-path-style 'abbrev)
  ;;   :config
  ;;   (ivy-set-display-transformer 'ivy-switch-buffer
  ;;                                'ivy-rich-switch-buffer-transformer))
#+end_src
* keybinds
#+begin_src emacs-lisp
  ;; Load keybinds, which are defined in keybinds.el
  (require 'keybinds)
#+end_src
* languages
for languages without native modes, or languages i need to edit
#+begin_src emacs-lisp
  (use-package rust-mode :ensure t)
  (use-package markdown-mode
    :ensure t
    :mode (("\\.md\\'" . markdown-mode)
           ("README\\.md\\'" . gfm-mode))
    :init (setq markdown-command "pandoc --metadata title='html'"))

  ;; c mode
  (use-package cc-mode
    :config
    (setq c-default-style "linux"
          c-basic-offset 4)
    (setq-default c-tab-always-indent nil)
    (add-hook 'c-mode-common-hook
              (lambda ()
                (c-set-style "linux")
                (setq c-basic-offset 4))))

  ;; 
  #+end_src

* launcher
using app-launcher
#+begin_src emacs-lisp
  (use-package app-launcher
    :ensure '(app-launcher :type git :host github :repo "SebastienWae/app-launcher"))

  (defun emacs-run-launcher ()
    "Create and select a frame called emacs-run-launcher which consists only of a minibuffer and has specific dimensions. Runs app-launcher-run-app on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited"
    (interactive)
    (with-selected-frame 
      (make-frame '((name . "emacs-run-launcher")
                    (minibuffer . only)
                    (fullscreen . 0) ; no fullscreen
                    (undecorated . t) ; remove title bar
                    ;;(auto-raise . t) ; focus on this frame
                    ;;(tool-bar-lines . 0)
                    ;;(menu-bar-lines . 0)
                    (internal-border-width . 10)
                    (width . 80)
                    (height . 11)))
                    (unwind-protect
                      (app-launcher-run-app)
                      (delete-frame))))
#+end_src
* lsp mode etc
Maybe in the future use lsp, dap-mode looks neat for C etc but the setup is such a pain in the arse that i don't think it's worth it
#+begin_src emacs-lisp
  ;; (use-package lsp-mode
  ;;   :ensure t
  ;;   :hook
  ;;   ((python-mode . lsp)))

  ;; (use-package lsp-ui
  ;;   :ensure t
  ;;   :commands lsp-ui-mode)
#+end_src
* magit
git shit
#+begin_src emacs-lisp
  (use-package transient
    :ensure t)
  (use-package magit
    :ensure t
    :after transient)
#+end_src
* modeline
#+begin_src emacs-lisp
  (use-package telephone-line
    :ensure t
    :init
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        telephone-line-primary-right-separator 'telephone-line-cubed-right
        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
    (setq telephone-line-height 24
          telephone-line-evil-use-short-tag t)
    (telephone-line-mode 1))
#+end_src
* org mode
** enable toc
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** enable bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
** diminish org-indent minor mode
#+begin_src emacs-lisp
  (with-eval-after-load 'org-indent
    (require 'diminish)
    (diminish 'org-indent-mode))
#+end_src
** other settings
#+begin_src emacs-lisp
  ;; follow links in org mode with RET
  (setq org-return-follows-link t)
#+end_src
** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/org-roam")
    (org-roam-completion-system 'ivy)
    (org-roam-complete-everywhere t)
    (org-roam-dailies-directory "journal/")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%H:%M> %?" :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
     ;; project template
     ("p" "project" plain "* %?"
        :if-new (file+head "project/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: project\n")
        :unnarrowed t)
     ;; bibliography template
     ("b" "bibliography" plain "* %?"
        :if-new (file+head "bibliographs/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: bibliography\n")
        :unnarrowed t)
     ;; note template
     ("n" "note" plain "* %?"
        :if-new (file+head "notes/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: note\n")
        :unnarrowed t))
     )
  
    ;; method to get the type of a node
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the type of an `org-roam-node'."
      (condition-case nil
          (file-name-nondirectory
           (directory-file-name
            (file-name-directory
             (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (error "file")))


    ;; set the display template for org-roam-node
    (setq org-roam-node-display-template
          (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))


    :config
    (org-roam-setup))

#+end_src

* prefs
** general
#+begin_src emacs-lisp
  ;; hide all the fucking bars
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; line numbers
  (global-display-line-numbers-mode 1)

  ;; disable truncating lines 
  (global-visual-line-mode -1)
  (visual-line-mode -1)

  ;; fix the fucking indents
  (electric-indent-mode 1)

  ;; automatic () pairing
  (electric-pair-mode 1)
  ;; block <> pairing
  (load-file (expand-file-name "custom-src/fix-org-pairing.el" user-emacs-directory))

  ;; show changes if file changed
  (global-auto-revert-mode t)

  ;; add \<s shorthand to org mode this shit doesn't fucking work either 
  (require 'org-tempo)
  (add-to-list 'org-modules 'org-tempo t)
#+end_src
** text
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** buffers
#+begin_src emacs-lisp
  (setq split-height-threshold 0)
  (setq split-width-threshold most-positive-fixnum)
#+end_src
* projectile
project management
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish
    :config
    (projectile-mode 1))
#+end_src
* rainbow delim
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
* rainbow mode
show colours as highlighted
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish
    :hook org-mode prog-mode)
#+end_src
* solaire
differentiate code from non-code buffers, requires certain theme settings, will set up later!
#+begin_src emacs-lisp
  (use-package solaire-mode
    :ensure t
    :config
    (solaire-global-mode 1))
#+end_src
* sudo edit
be able to edit files i need sudo to edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :config
    (yari/leader-keys
     "f u" '(sudo-edit-find-file :wk "sudo find file") ;; open file with sudo
     "f U" '(sudo-edit :wk "sudo edit file")) ;; escalate privalege to su on alr opened file
    )
#+end_src
* theme
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path (expand-file-name "themes/" user-emacs-directory))
  ;(load-theme 'timu-rouge t)
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-gruvbox t)
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (doom-themes-neotree-config)
    (doom-themes-org-config)
    (doom-themes-visual-bell-config)
    )


  (load-file (expand-file-name "themes/tabline.el" user-emacs-directory))
  (add-hook 'server-after-make-frame-hook (load-file (expand-file-name "themes/tabline.el" user-emacs-directory)))
  (set-face-attribute 'font-lock-comment-face nil ;; set comments to italics
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil ;; set keywords to italics
                      :slant 'italic)
  ;; icons for ivy and stuff

#+end_src
* tldr
#+begin_src emacs-lisp
  (use-package tldr :ensure t :defer t)
#+end_src
* treemacs
#+begin_src emacs-lisp
  (use-package  treemacs
    :ensure t
    :defer t
    :config
    (setq treemacs-no-png-images t)
    (setq treemacs-follow-mode t)
    (setq treemacs-filewatch-mode t)
    (setq treemacs-position 'right)
    (setq treemacs-project-follow-cleanup t)
    (treemacs-fringe-indicator-mode t))

  (use-package treemacs-evil :ensure t :after (treemacs evil))
  (use-package treemacs-magit :ensure t :after (treemacs magit))
  (use-package treemacs-projectile :ensure t :after (treemacs projectile))
#+end_src
* vertico & co
minibuffer autocompletion and shit!
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :config
    (setq vertico-cycle t))

  (use-package vertico-posframe
    :ensure t
    :init
    (vertico-posframe-mode))

  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

  (use-package consult
    :ensure t)

  (use-package consult-projectile
    :ensure t)

  (use-package embark
    :ensure t
    :bind
    ("C-S-a" . embark-act))

  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
#+end_src
* vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (setf exec-path-from-shell-copy-env '(
                                           "HYPRLAND_INSTANCE_SIGNATURE"
                                           )))
    ;; using this breaks projectile
    ;;:config
    ;; (setq shell-file-name "/bin/fish"
    ;;      vterm-max-scrollback 5000))
  (use-package vterm-toggle
    :ensure t
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                       (let ((buffer (get-buffer buffer-or-name)))
                         (with-current-buffer buffer
                           (or (equal major-mode 'vterm-mode)
                               (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                    (display-buffer-reuse-window display-buffer-at-bottom)
                    ;;(display-buffer-reuse-window display-buffer-in-direction)
                    ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                    ;;(direction . bottom)
                    ;;(dedicated . t) ;dedicated is supported in emacs27
                    (reusable-frames . visible)
                    (window-height . 0.3))))
#+end_src
* which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom ;; put it at the bottom
          which-key-sort-order #'which-key-key-order-alpha ;; 
          which-key-sort-uppercase-first nil ;;
          which-key-add-column-padding 1 ;;
          which-key-max-display-columns nil ;;
          which-key-min-display-lines 6 ;;
          which-key-side-window-slot -10 ;;
          which-key-side-window-max-height 0.25 ;;
          which-key-idle-delay 0.8 ;;
          which-key-max-description-length 25 ;;
          which-key-allow-imprecise-window-fit nil ;;
          whiich-key-seperator " > "))
#+end_src

    
