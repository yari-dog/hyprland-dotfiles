#+TITLE: emacs conf
#+AUTHOR: yari
#+STARTUP: showeverything
#+OPTIONS: toc:2



* toc :toc:
- [[#important-shit][important shit]]
  - [[#package-manager-elpaca][package manager elpaca]]
  - [[#evil-mode][evil mode]]
  - [[#autocomplete][autocomplete]]
  - [[#keybinds][keybinds]]
- [[#prefs][prefs]]
  - [[#general][general]]
  - [[#text][text]]
  - [[#which-key][which key]]
- [[#org-mode][org mode]]
  - [[#enable-toc][enable toc]]
  - [[#enable-bullets][enable bullets]]

* important shit
** package manager elpaca
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install a package via the elpaca macro
;; See the "recipes" section of the manual for more details.

;; (elpaca example-package)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use the :wait recipe keyword to block until that package has been installed/configured.
;;For example:
;;(use-package general :ensure (:wait t) :demand t)

;; Expands to: (elpaca evil (use-package evil :demand t))
;;(use-package evil :ensure t :demand t)

;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src
** evil mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :demand t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    ;;(setq evil-want-c-i-jump nil) ;; t breaks indenting lmao
    ;; nvm this didn't work, just edit in C-c '
    (evil-mode 1)) ;; start evil mode on load
  (use-package evil-collection ;; install the collection
    :ensure t
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor :ensure t)
#+end_src

** autocomplete
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t) ;;cycle through all things
    (corfu-auto t) ;;autocomplete
    (corfu-auto-prefix 2) ;; 2 letters to start autocomplete
    (corfu-auto-delay 0.0) ;; idk 0s to start?
    :bind (:map corfu-map
                ("RET" . nil) ;; unbind ret from insert
                ("S-<return>" . corfu-insert)) ;; shift enter
    :init
    (global-corfu-mode))

  ;; get eglot to play nice with corfu
  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)

  ;; there's probably more eglot shit i gotta set up but that's a later yari problem
#+end_src

** keybinds
#+begin_src emacs-lisp
(use-package general
      :ensure t  
      :config
      (general-evil-setup)

      (general-define-key
       ;;:prefix "C-"
       :states '(normal insert visual emacs)
       :keymaps 'override
       "C-n" '(windmove-left :wk "window left")
       "C-e" '(windmove-down :wk "window down")
       "C-i" '(windmove-up :wk "window up")
       "C-o" '(windmove-right :wk "window right")
       )

      (general-create-definer yari/leader-keys
                              :states '(normal insert visual emacs)
                              :keymaps 'override
                              :prefix "SPC"
                              :global-prefix "M-SPC") ;; for insert mode
      (yari/leader-keys
       "." '(find-file :wk "find file")
       "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "edit emacs config")
       ) 
      (yari/leader-keys
       "b" '(:ignore t :wk "buffer") ;; b is the prefix for the rest, :ignore says "this isn't a real binding" 
       "b s" '(switch-to-buffer :wk "switch buffer") ;; :wk is a tool hint for which-key plugin
       "b k" '(kill-this-buffer :wk "kill buffer")
       "b f" '(next-buffer :wk "next buffer")
       "b b" '(previous-buffer :wk "previous buffer")
       "b r" '(revert-buffer :wk "reload buffer (revert)")
       "b i" '(ibuffer :wk "ibuffer")
       )
      (yari/leader-keys
       "e" '(:ignore t :wk "buffer")
       "e r" '(eval-region :wk "eval selected region")
       "e b" '(eval-buffer :wk "eval buffer")
       )
      )

#+end_src
* prefs

** general
#+begin_src emacs-lisp
  ;; hide all the fucking bars
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; line numbers
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

#+end_src

** text
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-comment-face nil ;; set comments to italics
		      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil ;; set keywords to italics
		      :slant 'italic)
#+end_src


** which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom ;; put it at the bottom
	  which-key-sort-order #'which-key-key-order-alpha ;; 
	  which-key-sort-uppercase-first nil ;;
	  which-key-add-column-padding 1 ;;
	  which-key-max-display-columns nil ;;
	  which-key-min-display-lines 6 ;;
	  which-key-side-window-slot -10 ;;
	  which-key-side-window-max-height 0.25 ;;
	  which-key-idle-delay 0.8 ;;
	  which-key-max-description-length 25 ;;
	  which-key-allow-imprecise-window-fit t ;;
	  whiich-key-seperator " > " ;;
	  )
    )
#+end_src


* org mode
** enable toc
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)
    )
#+end_src

** enable bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
